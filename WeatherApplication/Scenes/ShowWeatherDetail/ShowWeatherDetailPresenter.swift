//
//  ShowWeatherDetailPresenter.swift
//  WeatherApplication
//
//  Created by dsadaoui on 11/08/2020.
//  Copyright (c) 2020 djabir. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

protocol ShowWeatherDetailPresentationLogic {
    func presentWeatherDetailSuccess(response: WeatherDetail.Success.Response)
    func presentWeatherDetailFailure(response: WeatherDetail.Failure.Response)
}

class ShowWeatherDetailPresenter: ShowWeatherDetailPresentationLogic {
    weak var viewController: ShowWeatherDetailDisplayLogic?
    
    // MARK: Present something
    func presentWeatherDetailSuccess(response: WeatherDetail.Success.Response) {
        let currentWeather = response.weatherData.current
        let hours = response.weatherData.hourlyArray.map { (current) -> WeatherHour in
            return WeatherHour(icon: current.weatherArray.first?.icon, hour: "\(Date.dateString(current.dt, format: "HH"))h", temp: "\(roundString(current.temp))°")
        }
        let icon = currentWeather.weatherArray.first?.icon
        let description = currentWeather.weatherArray.first?.weatherDescription
        let temp = "\(roundString(currentWeather.temp))°"
        let sunrise = Date.dateString(currentWeather.sunrise)
        let sunset = Date.dateString(currentWeather.sunset)
        let feelslike = "\(roundString(currentWeather.feelsLike))°"
        let pressure = "\(currentWeather.pressure) hPa"
        let humidity = "\(currentWeather.humidity) %"
        let visibility = "\(String(currentWeather.visibility/1000)) km"
        let winspeed = "\(roundString(currentWeather.windSpeed*3600/1000)) km/h"
        let viewModel = WeatherDetail.Success.ViewModel(icon: icon, description: description , temp: temp, sunrise: sunrise, sunset: sunset, feelslike: feelslike, pressure: pressure, humidity: humidity, visibility: visibility, winspeed: winspeed,hours: hours)
        self.viewController?.displayWeatherDetailSuccess(viewModel: viewModel)
    }
    func presentWeatherDetailFailure(response: WeatherDetail.Failure.Response) {
        let viewModel = WeatherDetail.Failure.ViewModel(error: response.error.localizedDescription)
        self.viewController?.displayWeatherDetailFailure(viewModel: viewModel)
    }
    func roundString(_ value: Double) -> String {
        return String(format: "%.0f", round(value))
    }
}
