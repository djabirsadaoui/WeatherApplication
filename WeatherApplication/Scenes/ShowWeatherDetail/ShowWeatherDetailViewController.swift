//
//  ShowWeatherDetailViewController.swift
//  WeatherApplication
//
//  Created by dsadaoui on 11/08/2020.
//  Copyright (c) 2020 djabir. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShowWeatherDetailDisplayLogic: class {
    func displayWeatherDetailSuccess(viewModel: WeatherDetail.Success.ViewModel)
    func displayWeatherDetailFailure(viewModel: WeatherDetail.Failure.ViewModel)
}

class ShowWeatherDetailViewController: UIViewController, ShowWeatherDetailDisplayLogic {
    // MARK: Outlets
    @IBOutlet weak var imageView: UIImageView!
    @IBOutlet weak var descreptionLabel: UILabel!
    @IBOutlet weak var tempLabel: UILabel!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    @IBOutlet weak var sunriseLabel: UILabel!
    @IBOutlet weak var sunsetLabel: UILabel!
    @IBOutlet weak var humidityLabel: UILabel!
    @IBOutlet weak var feelsLikeLabel: UILabel!
    @IBOutlet weak var windSpeedLabel: UILabel!
    @IBOutlet weak var visibilityLabel: UILabel!
    @IBOutlet weak var pressureLabel: UILabel!
    
    // MARK: Vars
    var interactor: ShowWeatherDetailBusinessLogic?
    var router: (NSObjectProtocol & ShowWeatherDetailRoutingLogic & ShowWeatherDetailDataPassing)?
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    required init?(coder aDecoder: NSCoder){
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        configure()
    }
    override func viewDidDisappear(_ animated: Bool) {
        self.cleanView()
    }
    
    // MARK: configure
    func configure(){
        self.title = interactor?.currentCity?.cityName
        interactor?.getCurrentAndForcastWeather()
        startAmination()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = ShowWeatherDetailInteractor()
        let presenter = ShowWeatherDetailPresenter()
        let router = ShowWeatherDetailRouter()
        let worker = ShowWeatherDetailWorker()
        interactor.worker = worker
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Display
    func displayWeatherDetailSuccess(viewModel: WeatherDetail.Success.ViewModel) {
        stopAnimation()
        if let icon = viewModel.icon {
            self.imageView.image = UIImage(named:icon)
        }
        self.descreptionLabel.text = viewModel.description
        self.tempLabel.text =  viewModel.temp
        self.sunriseLabel.text = viewModel.sunrise
        self.sunsetLabel.text = viewModel.sunset
        self.feelsLikeLabel.text = viewModel.feelslike
        self.pressureLabel.text = viewModel.pressure
        self.humidityLabel.text = viewModel.humidity
        self.windSpeedLabel.text = viewModel.winspeed
        self.visibilityLabel.text = viewModel.visibility
    }
    func displayWeatherDetailFailure(viewModel: WeatherDetail.Failure.ViewModel) {
        let alert = UIAlertController(title: "Alert", message: viewModel.error, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Close", style: .default, handler: { action in
            self.dismiss(animated: false, completion: nil)
            self.navigationController?.popViewController(animated: true)
        }))
        self.present(alert, animated: true, completion: nil)
    }
    
    private func cleanView() {
        self.imageView = nil
        self.descreptionLabel.text = ""
        self.tempLabel.text = ""
    }
    private func startAmination() {
        activityIndicator.isHidden = false
        activityIndicator.startAnimating()
    }
    private func stopAnimation() {
        activityIndicator.isHidden = true
        activityIndicator.stopAnimating()
    }
}


